//
//  TodayViewController.swift
//  TodayInHistory
//
//  Created by mac on 9.02.2020.
//  Copyright (c) 2020 Alaattin Bedir. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol TodayDisplayLogic: class
{
  func displaySomething(viewModel: ListToday.FetchToday.ViewModel)
}

class TodayViewController: UIViewController, TodayDisplayLogic
{
  let dailyCellNibName = "DailyTableViewCell"
  let dailyCellIdentifier = "DailyTableViewCell"
  
  var interactor: TodayBusinessLogic?
  var router: (NSObjectProtocol & TodayRoutingLogic & TodayDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = TodayInteractor()
    let presenter = TodayPresenter()
    let router = TodayRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  override func viewDidLoad()
  {
    super.viewDidLoad()
  }
  
  override func viewWillAppear(_ animated: Bool)
  {
    super.viewWillAppear(animated)
    fetchTodayInHistory()
  }
  
  // MARK: Do something
  //@IBOutlet weak var nameTextField: UITextField!
  var displayedEvents: [ListToday.FetchToday.ViewModel.Event] = []
  
  func doSomething()
  {
    let request = ListToday.FetchToday.Request()
    interactor?.doSomething(request: request)
  }
  
  func fetchTodayInHistory()
  {
    let request = ListToday.FetchToday.Request()
    interactor?.fetchTodayInHistory(request: request)
  }
  
  func displaySomething(viewModel: ListToday.FetchToday.ViewModel)
  {
    
    //nameTextField.text = viewModel.name
  }
}


// MARK: - Extensions
// MARK: - UITableViewDelegate
extension TodayViewController : UITableViewDelegate, UITableViewDataSource {
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
//        guard let forecastDaily = weather?.daily?.data else { return 0 }        
        return displayedEvents.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: dailyCellIdentifier) as! DailyTableViewCell
        
//        guard let data = weather?.daily?.data![indexPath.row] else { return cell }
//        cell.configureCell(dailyData: data)
        
        return cell
    }
}
